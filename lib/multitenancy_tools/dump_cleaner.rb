module MultitenancyTools
  # This class receives an SQL string and removes statements that should not
  # be present on dumps generated by {SchemaDumper} and {TableDumper}.
  class DumpCleaner
    # @param [String] sql
    def initialize(sql, schema_name = '')
      @schema_name = schema_name
      @sql = sql.dup
    end

    # Returns a new cleaned string.
    #
    # @return String
    def clean
      @sql.gsub!(/CREATE SCHEMA .*;\n/, '')
      @sql.gsub!(/SET search_path .*;\n/, '')
      @sql.gsub!(/SET statement_timeout .*;\n/, '')
      @sql.gsub!(/SET lock_timeout .*;\n/, '')
      @sql.gsub!(/^--(?:.*)\n+/, '')
      @sql.gsub!(/\n+/, "\n")
      clean_schema_names!
      clean_catalog_overwrites!
      @sql
    end

    private

    # Matches namespaces containing the given schema_name
    #
    # For instance:
    # CREATE TABLE schema1.posts ();
    #
    # Will be replaced by:
    # CREATE TABLE posts ();
    def clean_schema_names!
      return if @schema_name.blank?

      @sql.gsub!(/\b#{@schema_name}\.([\S\D]*)/, '\1')
    end

    # Removes system administrators configs overwrites
    def clean_catalog_overwrites!
      @sql.gsub!(/SELECT pg_catalog\.set_config.*;\n/, '')
    end
  end
end
